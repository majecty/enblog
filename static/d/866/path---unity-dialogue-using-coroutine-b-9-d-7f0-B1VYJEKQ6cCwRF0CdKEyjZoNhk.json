{"data":{"markdownRemark":{"html":"<p>Coroutine allows you to implement the primary dialogue system intuitively.</p>\n<p>Dialogs are used in so many games.\nMany games use dialogs. Visual novel, as well as RPG, action games, puzzle games, and all other games can  have characters that speak, and they use the dialogue to provide information to the player. Also, users are familiar with the dialogue system.</p>\n<p>However, Unity does not provide a dialogue system. A programmer should buy an asset or manually implement it. If the requirements for the dialog are complicated, you will use a feature-rich and complex paid asset, but if you have a simple need, it is better to create it yourself.</p>\n<p>Let's begin with a pure spec that does not consider any user's input.</p>\n<ol>\n<li>Show a line of text to the user, character by character.</li>\n<li>Wait a while.</li>\n<li>Show another line of text again.</li>\n</ol>\n<p>Implementing the spec is easy.</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\">IEnumerator</span> <span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> texts<span class=\"token punctuation\">.</span>Count<span class=\"token punctuation\">;</span> i <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">yield</span> <span class=\"token keyword\">return</span> <span class=\"token function\">PlayLine</span><span class=\"token punctuation\">(</span>texts<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token class-name\">IEnumerator</span> <span class=\"token function\">PlayLine</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span> text<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> text<span class=\"token punctuation\">.</span><span class=\"token function\">Length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">yield</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WaitForSeconds</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.05f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        uiText<span class=\"token punctuation\">.</span>text <span class=\"token operator\">=</span> text<span class=\"token punctuation\">.</span><span class=\"token function\">Substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">yield</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WaitForSeconds</span><span class=\"token punctuation\">(</span><span class=\"token number\">3f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>However, most users do not want to read the dialogue. They want to pass the dialogue and play the game as soon as possible. However, if we provide a \"total\" skip button to the users, the users will not know the essential contents, and they will be wandering in the game. Therefore, it is necessary to show the information quickly enough for the impatient user to be able to understand the minimum contents.</p>\n<ol>\n<li>While showing a line of text character by character, if a user skips it, show all the remaining characters.</li>\n<li>Wait a while.</li>\n<li>If the user skips the text or waits long enough, show another line of text character by character.</li>\n</ol>\n<p>Let's add some code to the above code.</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">enum</span> State\n<span class=\"token punctuation\">{</span>\n    Playing<span class=\"token punctuation\">,</span>\n    PlayingSkipping<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token class-name\">IEnumerator</span> <span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> texts<span class=\"token punctuation\">.</span>Count<span class=\"token punctuation\">;</span> i <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">yield</span> <span class=\"token keyword\">return</span> <span class=\"token function\">PlayLine</span><span class=\"token punctuation\">(</span>texts<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token class-name\">IEnumerator</span> <span class=\"token function\">PlayLine</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span> text<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> text<span class=\"token punctuation\">.</span><span class=\"token function\">Length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>state <span class=\"token operator\">==</span> State<span class=\"token punctuation\">.</span>PlayingSkipping<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            uiText<span class=\"token punctuation\">.</span>text <span class=\"token operator\">=</span> text<span class=\"token punctuation\">;</span>\n            state <span class=\"token operator\">=</span> State<span class=\"token punctuation\">.</span>Playing<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">yield</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WaitForSeconds</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.05f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        uiText<span class=\"token punctuation\">.</span>text <span class=\"token operator\">=</span> text<span class=\"token punctuation\">.</span><span class=\"token function\">Substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">yield</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WaitForSeconds</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.5f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span><span class=\"token number\">25</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">+</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">yield</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WaitForSeconds</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.1f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>state <span class=\"token operator\">==</span> State<span class=\"token punctuation\">.</span>PlayingSkipping<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            state <span class=\"token operator\">=</span> State<span class=\"token punctuation\">.</span>Playing<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Skip</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    state <span class=\"token operator\">=</span> State<span class=\"token punctuation\">.</span>PlayingSkipping<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The vital point of the above code is that when a user clicks the skip button, it simply changes the state. This makes it safe for users to skip multiple times, and it is easy to manage the code because the control flow of the code is concentrated in the <code class=\"language-text\">PlayLine</code> function.</p>\n<p>You can find a sample project in <a href=\"https://github.com/majecty/DialogueByCoroutineExample\">this link</a>.</p>\n<p>P.S: the above example does not support rich text. There is a library that supports rich text by replacing two lines. Please check this at <a href=\"https://github.com/majecty/Unity3dRichTextHelper\">the link</a></p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">for (int i = 0; i &lt; text.RichTextLength() + 1; i += 1)\n{\n    yield return new WaitForSeconds(0.05f);\n    uiText.text = text.RichTextSubString(i);\n}</code></pre></div>","frontmatter":{"title":"Making a dialogue system using Coroutine"}}},"pageContext":{"slug":"/unity-dialogue-using-coroutine/"}}